\documentclass[titlepage]{article}

%Set includes and layout constraints
\usepackage{amsmath}
\usepackage{amscd}
\usepackage{graphicx}
\usepackage{vmargin}
\usepackage{subfigure}
\usepackage[T1]{fontenc}
\usepackage[sc]{mathpazo}

% Keep last
\usepackage{hyperref}

\setpapersize{USletter}
\setmarginsrb{1in}{1in}{1in}{1in}{12pt}{0mm}{0pt}{0mm}

\begin{document}
\SweaveOpts{concordance=TRUE}
\author{\Sexpr{Sys.getenv("USERNAME")}}
\title{Schmid Lab Microarray Pipeline}
\date{\today}

\maketitle
\tableofcontents
\listoffigures
\pagebreak

\section{Initialization}
This document contains the output of the Schmid lab microarray pipeline, an 
R Bioconductor based platform for microarray prepossessing and normalizing. For questions regarding this program, email amy.schmid@duke.edu.

\subsection{Parameters and libraries}
<<libraries>>=
rm(list=ls())
start_time <- Sys.time()
library(limma)
source("metareader.r")
library(maDB)
library(RColorBrewer)
library('yaml')
@

<<config>>=
config <- yaml.load(
"
algorithms:
  bgCorrection: normexp
  withinArray:  loess
  betweenArray: quantile
  median: no

files:
  library: ./lib
  metadata: ./metadata.txt
  metadataAuto: ./metadata_autogenerated.txt
  rawDir: ./raw
  tmpDir:  ./analysis
  output: ./output/demo_normexp_loess_quantile.txt
  dfoutput: ./output/demo_normexp_loess_quantile_dye_flip.txt

quiet:
  backgroundCorrection: no
  withinArrayNormalization:  no

dixon:
  cutoff: 0.01

bgText:
  main: > 
    The following code draws a plot of the raw data for each microarray. 
    Specifically, it draws an MA plot of the regulation values (M values, 
    differential expression) of all the genes against their average 
    expression (A). The red and green lines in the plot represent the 
    mean and median, respectively. The turquoise line in the plot 
    represents the lowess fit line.
  verbose: >
    The following MA plots show the data after background correction.
  quiet: >
    These diagnostic plots have been suppressed. Please edit the 
    config.yaml file and set quiet:backgroundCorrection to no to 
    re-enable them. 
    
wanText:
  vsn: The vsn algorithm does not require within array normalization.
  other: >
    In this section, we normalize within arrays using the xxx algorithm. 
  verbose: >
    The following MA plots show the data after with array normalization.
  quiet: >
    These diagnostic plots have been suppressed. Please edit the config.yaml
    file and set quiet:withArrayNormalization to no to re-enable them. 
")
source(paste(config$files$library,"/pipeline_utils.R",sep=""))
source(paste(config$files$library,"/latex_utils.R",sep=""))
config$arrays <- readWriteNewMetadata(config$files$metadata, config$files$metadataAuto)
@

\subsection{Loading raw data}
This section first loads the raw data into memory and then
intitalizes the appropriate data structures using limma. Finally, it
removes all control probes. 
<<load>>=
targets <-readTargets(config$files$metadataAuto)
targets$FileName <- gsub(" ", "", targets$FileName)
Slides.raw<-read.maimages(files=targets$FileName, source=getType(config), 
		path=config$files$rawDir, names=targets$Name, verbose=TRUE)
Slides.raw$targets <-targets

config$count<-length(targets$FileName)
config$targets<-targets
config$vsn<-(config$algorithms$betweenArray=="vsn")
@

\section{Background correction}
\subsection{Calculations}
\Sexpr{getBackgroundText(config)}
<<backgroundCorrect>>=
Slides.raw <-backgroundCorrect(Slides.raw, method=config$algorithms$bgCorrection)
Dummy<-newMadbSet(Slides.raw)
if(!config$quiet$backgroundCorrect){
  for(i in 0:(config$count-1)) {
    FILENAME<-paste(config$files$tmpDir, "/maAfterBg",i, ".png", sep="" )
    png(FILENAME, width=7, height=7, units="in", res=300)
    drawMA(Dummy, r=1+2*i, g=2+2*i, 
		colramp=colorRampPalette(rev(brewer.pal(9,"Blues")[2:9])))
    dev.off()
  }
}
@
\pagebreak
\subsection{Diagnostic MA plots}
\Sexpr{getBgMaPlotText(config)}
\Sexpr{getPairedMAFiguresBg(config$files$tmpDir, config)}
\subsection{Boxplot}
<<boxplot>>=
if(!config$vsn) {
  FILENAME<-paste(config$files$tmpDir, "/", "boxPlot1.png",sep="")
  png(FILENAME, width=7, height=7, units="in", res=300)
  boxplot(Dummy, log2.transform = TRUE)
  dev.off()
}
@
\Sexpr{getBoxplotCommandOne(config)}

\section{Within array normalization}
\subsection{Calculation}
\Sexpr{getWithinArrayNormText(config)}
<<withinArrayNorm>>=
if(!config$vsn){
  Slides.norm <- normalizeWithinArrays(Slides.raw, layout=Slides.raw$printer,
		method=config$algorithms$withinArray)
  rm(Slides.raw)
  gc()
  if(!config$quiet$backgroundCorrect){
  Dummy<-newMadbSet(Slides.norm)
    for(i in 0:(config$count -1)) {
      FILENAME<-paste(config$files$tmpDir, "/maAfterWAN",i, ".png", sep="" )
      png(FILENAME, width=7, height=7, units="in", res=300)
      drawMA(Dummy, r=1+2*i, g=2+2*i, 
			colramp=colorRampPalette(rev(brewer.pal(9,"Blues")[2:9])))
	  dev.off()
    }
  }
} else {
	Slides.norm<-Slides.raw
	rm(Slides.raw)
	g<-gc()
	cat("No within array normalization was performed")
}
@
\pagebreak
\subsection{Diagnostic MA plots}
\Sexpr{getWanText(config)}
\Sexpr{getMAFiguresWAN(config$files$tmpDir, config)}
<<boxplot2>>=
if(!config$vsn) {
	Dummy<-newMadbSet(Slides.norm)
	FILENAME<-paste(config$files$tmpDir, "/", "boxPlot2.png",sep="")
	png(FILENAME, width=7, height=7, units="in", res=300)
	boxplot(Dummy, log2.transform = TRUE)
	dev.off()
}
@
\Sexpr{getBoxplotCommandTwo(config)}

\section{Between array normalization}
In this section, first draw a diagnostic histogram of the within array 
normalized data. In the case of the vsn algorithm, it draws a histogram
of the raw data.
<<betweenArrayHistB>>=
Dummy<-newMadbSet(Slides.norm)
HIST_B=paste(config$files$tmpDir,"/", "histBeforeBAN.png",sep="")
png(HIST_B, width=7, height=7, units="in", res=300)
drawHistogram(Dummy)
dev.off()
@
We then normalize between arrays using the \Sexpr{config$algorithms$betweenArray} 
algorithm and draw a set of diagnostic MA  plots. 
<<betweenArrayDiagnositic>>=
Slides.norm<-normalizeBetweenArrays(Slides.norm, method=config$algorithms$betweenArray)
Dummy<-newMadbSet(Slides.norm)
HIST_A=paste(config$files$tmpDir,"/", "histAfterBAN.png",sep="")
png(HIST_A, width=7, height=7, units="in", res=300)
drawHistogram(Dummy)
dev.off()
for(i in 0:(config$count-1)) {
	FILENAME<-paste(config$files$tmpDir, "/maAfterBAN",i, ".png", sep="" )
	png(FILENAME, width=7, height=7, units="in", res=300)
	drawMA(Dummy, r=1+2*i, g=2+2*i, 
			colramp=colorRampPalette(rev(brewer.pal(9,"Blues")[2:9])))
	dev.off()
}
@
\begin{figure}[htb!]
\centering
\subfigure[Before between array normalization]{
\includegraphics[width=3.25in]{\Sexpr{return(HIST_B)}}}
\subfigure[After between array normalization]{
\includegraphics[width=3.25in]{\Sexpr{return(HIST_A)}}}
\caption{Histogram of all arrays within this experiment before and after 
the between array normalization}
\end{figure}
\pagebreak
The quality of the within array normalization process can also be assessed 
using a boxplot.
<<boxplot3>>=
Dummy<-newMadbSet(Slides.norm)
BOX3=paste(config$files$tmpDir, "/", "boxPlot3.png",sep="")
png(BOX3, width=7, height=7, units="in", res=300)
boxplot(Dummy, log2.transform = TRUE)
dev.off()
@
\begin{figure}[htb!]
\centering
\includegraphics{\Sexpr{return(BOX3)}}
\end{figure}
\pagebreak
\Sexpr{getPairedMAFiguresBAN(config)}

<<rm_control_probes>>=
control_mask<-(Slides.norm$genes$ControlType != 0)
Slides.norm<- Slides.norm[!control_mask,]
cat("Removed ", sum(control_mask), " control probes.\n")
gene_names <- getUniqueGeneNames(config)
cat(length(gene_names), " genes were found. ")
@
All dye swapped columns must be labelled in the metadata file as XXX and XXX\_DF
<<bind_data_structures>>=
output_data <- matrix(rep(NA, length(gene_names)*(config$count/2)), nrow=length(gene_names))
not_flip <- matrix(rep(NA, length(gene_names)*(config$count/2)), nrow=length(gene_names))
dye_flip <- matrix(rep(NA, length(gene_names)*(config$count/2)), nrow=length(gene_names))
rownames(output_data) <- gene_names
rownames(not_flip)    <- gene_names
sorted_slides <- sort(config$arrays$name)
col_names <- c()
col_names_flip <- c()
for(slide_idx in seq(1, length(sorted_slides))) {
  sname <- sorted_slides[slide_idx]
  slide <- config$arrays[config$arrays$name==sname,]
  for(i in 1:length(gene_names)) {
    gene = gene_names[i]
    #Find the spots with the given gene name
    if(config$algorithms$median) {
      gene_mask <- Slides.norm$genes$ProbeName == gene;
    } else {
      gene_mask <- Slides.norm$genes$ProbeName == gene;
    }
    name_mask <- colnames(Slides.norm)==slide$name
    flip_mask <- colnames(Slides.norm)==slide$flip

    cy5 <- Slides.norm[gene_mask, name_mask]$M
    cy3 <- Slides.norm[gene_mask, flip_mask]$M
    
    stopifnot(is.numeric(cy5) && is.numeric(cy3))
    expr <- c(cy5, -1*cy3)
    outlier_removed <- rm_outliers(expr, gene)
    not_flip[i, slide_idx] <- mean(subset(cy5, cy5 %in% outlier_removed))
    dye_flip[i, slide_idx] <- mean(subset(-cy3, -cy3 %in% outlier_removed)) ##I think the '-' sign might go on the initial 'cy3'
    output_data[i,slide_idx] <- mean(outlier_removed)
  }
  col_names <- c(col_names, as.character(slide$name))
  col_names_flip <- c(col_names_flip, as.character(slide$flip))
}
colnames(not_flip) <- col_names
colnames(dye_flip) <- col_names_flip
colnames(output_data) <- col_names

tmp_array <- cbind(not_flip, dye_flip)

gene.col <- gene_names
colnames(gene.col) <- c("GeneName")
formatted.output <- cbind(gene.col, format(output_data, trim=T, scientific=F))

write.table(formatted.output,
							file=config$files$output,	sep="\t", col.names=T,
						row.names=F, quote=F)

write.table(format(tmp_array,scientific=FALSE), file=config$files$dfoutput,sep="\t",col.names=T,
						row.names = T)
end_time = Sys.time()
cat("Time to generate document: ", end_time - start_time,'\n')
@

\end{document}

